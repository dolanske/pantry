{"version":3,"file":"pantry.js","sources":["../src/link.ts","../src/pantry.ts"],"sourcesContent":["import type { Children } from '@dolanske/cascade'\nimport { El } from '@dolanske/cascade'\nimport { navigate } from '@dolanske/crumbs'\n\nexport function RouterLink(href: string, text: Children) {\n  return El.a().setup((component) => {\n    component.attr('href', href)\n    component.nest(text)\n    component.click((event) => {\n      event.preventDefault()\n      navigate(href)\n    })\n  })\n}\n","import type { Route as CrumbRoute, Router as CrumbRouter } from '@dolanske/crumbs'\nimport { defineRouter, onRouteError, onRouteResolve } from '@dolanske/crumbs'\nimport { Component } from '@dolanske/cascade'\n\nfunction noop() { }\n\nexport interface Route {\n  component: Component\n  loader?: CrumbRoute['loader']\n  title?: CrumbRoute['title']\n  default?: CrumbRoute['default']\n  fallback?: Component\n}\n\ntype Router = Record<string, Route | Component>\n\nexport function createApp(routes: Router) {\n  const RouterViews: Record<string, Component> = {}\n  const RouteFallbacks: Record<string, Component> = {}\n  const CrumbsRouter: CrumbRouter = {}\n\n  // Serialize base application routes into what crumbs can consume\n  for (const [path, route] of Object.entries(routes)) {\n    // This router is generic, built for HTML, so within Cascade, we just need to\n    // mimic the router paths with an emty div as a router wrapper\n    const html = '<div route-boundary>'\n    if (route instanceof Component) {\n      RouterViews[path] = route\n      CrumbsRouter[path] = {\n        html,\n      }\n    }\n    else {\n      const { loader, title, default: _default, fallback, component } = route\n      RouterViews[path] = component\n      CrumbsRouter[path] = {\n        loader,\n        title,\n        default: _default,\n        html,\n      }\n\n      if (fallback)\n        RouteFallbacks[path] = fallback\n    }\n  }\n\n  const router = defineRouter(CrumbsRouter)\n\n  // Store stopper between `run` and `stop` handlers\n  let onResolveRelease = noop\n  let onErrorRelease = noop\n\n  let prevView: Component | undefined\n  let prevFallback: Component | undefined\n\n  return {\n    run: (selector: string) => {\n      // Watch for when new route is navigated into and then render Cascade app into its wrapper\n      onResolveRelease = onRouteResolve((route) => {\n        if (prevView)\n          prevView.destroy()\n\n        const newView = RouterViews[route.path]\n        if (newView) {\n          const view = newView.clone()\n          // If route contained a loader, set the data as a prop\n          view.props({\n            $data: route.data,\n            $params: route.params,\n          })\n\n          view.mount('[route-boundary]')\n          prevView = view\n        }\n      })\n\n      // TODO: add global fallback?\n      onErrorRelease = onRouteError((route, error) => {\n        if (!route) {\n          console.warn('Attempted to navigate to a route that does not exist')\n          console.error(error)\n          return\n        }\n\n        if (prevFallback)\n          prevFallback.destroy()\n\n        const newFallback = RouteFallbacks[route.path]\n        if (newFallback) {\n          const fallback = newFallback.clone()\n\n          fallback.mount('route-boundary')\n          prevFallback = fallback\n        }\n      })\n\n      router.run(selector)\n    },\n    stop: () => {\n      router.stop()\n      onResolveRelease()\n      onErrorRelease()\n      if (prevView)\n        prevView.destroy()\n      if (prevFallback)\n        prevFallback.destroy()\n    },\n  }\n}\n"],"names":["RouterLink","href","text","El","component","event","navigate","noop","createApp","routes","RouterViews","RouteFallbacks","CrumbsRouter","path","route","html","Component","loader","title","_default","fallback","router","defineRouter","onResolveRelease","onErrorRelease","prevView","prevFallback","selector","onRouteResolve","newView","view","onRouteError","error","newFallback"],"mappings":";;;;AAIgB,SAAAA,EAAWC,GAAcC,GAAgB;AACvD,SAAOC,EAAG,EAAA,EAAI,MAAM,CAACC,MAAc;AACvB,IAAAA,EAAA,KAAK,QAAQH,CAAI,GAC3BG,EAAU,KAAKF,CAAI,GACTE,EAAA,MAAM,CAACC,MAAU;AACzB,MAAAA,EAAM,eAAe,GACrBC,EAASL,CAAI;AAAA,IAAA,CACd;AAAA,EAAA,CACF;AACH;ACTA,SAASM,IAAO;AAAE;AAYX,SAASC,EAAUC,GAAgB;AACxC,QAAMC,IAAyC,CAAA,GACzCC,IAA4C,CAAA,GAC5CC,IAA4B,CAAA;AAGlC,aAAW,CAACC,GAAMC,CAAK,KAAK,OAAO,QAAQL,CAAM,GAAG;AAGlD,UAAMM,IAAO;AACb,QAAID,aAAiBE;AACnB,MAAAN,EAAYG,CAAI,IAAIC,GACpBF,EAAaC,CAAI,IAAI;AAAA,QACnB,MAAAE;AAAA,MAAA;AAAA,SAGC;AACH,YAAM,EAAE,QAAAE,GAAQ,OAAAC,GAAO,SAASC,GAAU,UAAAC,GAAU,WAAAhB,EAAc,IAAAU;AAClE,MAAAJ,EAAYG,CAAI,IAAIT,GACpBQ,EAAaC,CAAI,IAAI;AAAA,QACnB,QAAAI;AAAA,QACA,OAAAC;AAAA,QACA,SAASC;AAAA,QACT,MAAAJ;AAAA,MAAA,GAGEK,MACFT,EAAeE,CAAI,IAAIO;AAAA,IAC3B;AAAA,EACF;AAEM,QAAAC,IAASC,EAAaV,CAAY;AAGxC,MAAIW,IAAmBhB,GACnBiB,IAAiBjB,GAEjBkB,GACAC;AAEG,SAAA;AAAA,IACL,KAAK,CAACC,MAAqB;AAEN,MAAAJ,IAAAK,EAAe,CAACd,MAAU;AACvC,QAAAW,KACFA,EAAS,QAAQ;AAEb,cAAAI,IAAUnB,EAAYI,EAAM,IAAI;AACtC,YAAIe,GAAS;AACL,gBAAAC,IAAOD,EAAQ;AAErB,UAAAC,EAAK,MAAM;AAAA,YACT,OAAOhB,EAAM;AAAA,YACb,SAASA,EAAM;AAAA,UAAA,CAChB,GAEDgB,EAAK,MAAM,kBAAkB,GAClBL,IAAAK;AAAA,QACb;AAAA,MAAA,CACD,GAGgBN,IAAAO,EAAa,CAACjB,GAAOkB,MAAU;AAC9C,YAAI,CAAClB,GAAO;AACV,kBAAQ,KAAK,sDAAsD,GACnE,QAAQ,MAAMkB,CAAK;AACnB;AAAA,QACF;AAEI,QAAAN,KACFA,EAAa,QAAQ;AAEjB,cAAAO,IAActB,EAAeG,EAAM,IAAI;AAC7C,YAAImB,GAAa;AACT,gBAAAb,IAAWa,EAAY;AAE7B,UAAAb,EAAS,MAAM,gBAAgB,GAChBM,IAAAN;AAAA,QACjB;AAAA,MAAA,CACD,GAEDC,EAAO,IAAIM,CAAQ;AAAA,IACrB;AAAA,IACA,MAAM,MAAM;AACV,MAAAN,EAAO,KAAK,GACKE,KACFC,KACXC,KACFA,EAAS,QAAQ,GACfC,KACFA,EAAa,QAAQ;AAAA,IACzB;AAAA,EAAA;AAEJ;"}